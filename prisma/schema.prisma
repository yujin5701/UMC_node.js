generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              BigInt   @id @default(autoincrement()) @db.BigInt
  email           String   @unique @db.VarChar(50)
  name            String   @db.VarChar(20)
  gender          String?  @db.VarChar(10)
  birth           DateTime?
  address         String?  @db.VarChar(40)
  detail_address  String?  @db.VarChar(40)
  status          String?  @db.VarChar(15)
  inactive_date   DateTime?
  social_type     String?  @db.VarChar(10)
  created_at      DateTime? @db.DateTime(6)
  updated_at      DateTime? @db.DateTime(6)
  phone_number    String?  @db.VarChar(20)

  user_agree         UserAgree[]
  user_prefer        UserPrefer[]
  user_favor_category UserFavorCategory[]
  user_mission       UserMission[]
  reviews            Review[]
}

model UserAgree {
  id         BigInt   @id @default(autoincrement()) @db.BigInt
  user_id    BigInt?  @db.BigInt
  terms_id   BigInt?  @db.BigInt
  created_at DateTime @default(now()) @db.DateTime(6)
  updated_at DateTime @default(now()) @updatedAt @db.DateTime(6)

  user   User?   @relation(fields: [user_id], references: [id])
  terms  Terms?  @relation(fields: [terms_id], references: [id])
}

model Terms {
  id         BigInt     @id @default(autoincrement()) @db.BigInt
  user_agree UserAgree[]
}

model FoodCategory {
  id         BigInt         @id @default(autoincrement()) @db.BigInt
  name       String?        @db.VarChar(15)
  created_at DateTime       @default(now()) @db.DateTime(6)
  updated_at DateTime       @default(now()) @updatedAt @db.DateTime(6)

  user_prefer        UserPrefer[]
  user_favor_category UserFavorCategory[]
}

model UserPrefer {
  id          BigInt        @id @default(autoincrement()) @db.BigInt
  user_id     BigInt?       @db.BigInt
  category_id BigInt?       @db.BigInt
  created_at  DateTime      @default(now()) @db.DateTime(6)
  updated_at  DateTime      @default(now()) @updatedAt @db.DateTime(6)

  user         User?         @relation(fields: [user_id], references: [id])
  food_category FoodCategory? @relation(fields: [category_id], references: [id])
}

model Region {
  id         BigInt   @id @default(autoincrement()) @db.BigInt
  name       String?  @db.VarChar(20)
  created_at DateTime @default(now()) @db.DateTime(6)
  updated_at DateTime @default(now()) @updatedAt @db.DateTime(6)

  stores     Store[]
}

model Store {
  id         BigInt   @id @default(autoincrement()) @db.BigInt
  region_id  BigInt?  @db.BigInt
  name       String?  @db.VarChar(50)
  address    String?  @db.VarChar(50)
  score      Float?
  created_at DateTime @default(now()) @db.DateTime(6)
  updated_at DateTime @default(now()) @updatedAt @db.DateTime(6)

  region     Region?   @relation(fields: [region_id], references: [id])
  missions   Mission[]
  reviews    Review[]
}

model Mission {
  id           BigInt   @id @default(autoincrement()) @db.BigInt
  store_id     BigInt?  @db.BigInt
  reward       Int?
  deadline     DateTime?
  mission_spec String?
  created_at   DateTime @default(now()) @db.DateTime(6)
  updated_at   DateTime @default(now()) @updatedAt @db.DateTime(6)

  store        Store?         @relation(fields: [store_id], references: [id])
  user_mission UserMission[]
}

model UserMission {
  id          BigInt   @id @default(autoincrement()) @db.BigInt
  user_id     BigInt?  @db.BigInt
  mission_id  BigInt?  @db.BigInt
  status      String?  @db.VarChar(15)
  created_at  DateTime @default(now()) @db.DateTime(6)
  updated_at  DateTime @default(now()) @updatedAt @db.DateTime(6)

  user    User?    @relation(fields: [user_id], references: [id])
  mission Mission? @relation(fields: [mission_id], references: [id])
}

model Review {
  id         BigInt   @id @default(autoincrement()) @db.BigInt
  user_id    BigInt?  @db.BigInt
  store_id   BigInt?  @db.BigInt
  body       String?
  score      Float?

  user       User?   @relation(fields: [user_id], references: [id])
  store      Store?  @relation(fields: [store_id], references: [id])
  images     ReviewImage[]
}

model ReviewImage {
  id         BigInt   @id @default(autoincrement()) @db.BigInt
  review_id  BigInt?  @db.BigInt
  image_url  String?
  created_at DateTime @default(now()) @db.DateTime(6)
  updated_at DateTime @default(now()) @updatedAt @db.DateTime(6)

  review     Review?  @relation(fields: [review_id], references: [id])
}

model UserFavorCategory {
  id               BigInt       @id @default(autoincrement()) @db.BigInt
  food_category_id BigInt       @db.BigInt
  user_id          BigInt       @db.BigInt

  food_category    FoodCategory @relation(fields: [food_category_id], references: [id])
  user             User         @relation(fields: [user_id], references: [id])
}
